@page
@model Ass2_WebRazor.Pages.Authors.SearchViewModel
@{
    ViewData["Title"] = "Search View";
}

<h1>Search Results</h1>

<!-- Display search term -->
@{
    var searchTerm = Request.Query["search"];
}

<p>Search term: @searchTerm</p>

<!-- Authors table -->
<div class="table-responsive">
    <table class="table table-striped">
        <thead>
            <tr>
                <th style="white-space: nowrap;" >Author ID</th>
                <th style="white-space: nowrap;" >Last Name</th>
                <th style="white-space: nowrap;" >First Name</th>
                <th style="white-space: nowrap;" >Phone</th>
                <th style="white-space: nowrap;" >Address</th>
                <th style="white-space: nowrap;" >City</th>
                <th style="white-space: nowrap;" >State</th>
                <th style="white-space: nowrap;" >Zip</th>
                <th style="white-space: nowrap;" >Email</th>
                <th colspan="2">Actions</th>
            </tr>
        </thead>
        <tbody id="authorsTableBody">
            <!-- Authors data will be dynamically populated here -->
        </tbody>
    </table>
</div>

<!-- Return button -->
<div class="mt-3">
    <button class="btn btn-primary" onclick="returnToIndex()">Return to Index</button>
</div>

<script>
    // Function to fetch authors data from API based on search term
    async function fetchAuthorsBySearchTerm(searchTerm) {
        try {
            const response = await fetch(`https://localhost:7027/api/Authors/search?name=${encodeURIComponent(searchTerm)}`);
            const data = await response.json();

            // Clear previous data in table body
            const tableBody = document.getElementById('authorsTableBody');
            tableBody.innerHTML = '';

            // Populate table with authors data
            if (data.length > 0) {
                data.forEach(author => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td style="white-space: nowrap;">${author.authorid}</td>
                        <td style="white-space: nowrap;">${author.authorlastname}</td>
                        <td style="white-space: nowrap;">${author.authorfirstname}</td>
                        <td style="white-space: nowrap;">${author.authorphone}</td>
                        <td style="white-space: nowrap;">${author.authoraddress}</td>
                        <td style="white-space: nowrap;">${author.authorcity}</td>
                        <td style="white-space: nowrap;">${author.authorstate}</td>
                        <td style="white-space: nowrap;">${author.authorzip}</td>
                        <td style="white-space: nowrap;">${author.authoremail}</td>
                        <td>
                            <button class="btn btn-info" onclick="updateAuthor(${author.authorid})">Update</button>
                        </td>
                        <td>
                            <button class="btn btn-danger" onclick="deleteAuthor(${author.authorid})">Delete</button>
                        </td>
                    `;
                    tableBody.appendChild(row);
                });
            } else {
                // Display message if no authors found
                const row = document.createElement('tr');
                row.innerHTML = `<td colspan="10">No authors found.</td>`;
                tableBody.appendChild(row);
            }
        } catch (error) {
            console.error('Error fetching authors data:', error);
        }
    }

    // Function to handle author update
    function updateAuthor(authorId) {
        window.location.href = `/Authors/Update?id=${authorId}`;
    }

    // Function to handle author deletion
    async function deleteAuthor(authorId) {
        const confirmDelete = confirm("Are you sure you want to delete this author?");
        if (confirmDelete) {
            try {
                const response = await fetch(`https://localhost:7027/api/Authors/${authorId}`, {
                    method: 'DELETE'
                });
                if (response.ok) {
                    fetchAuthorsBySearchTerm('@searchTerm');
                } else {
                    console.error('Error deleting author:', response.statusText);
                    alert('Error deleting author. Please try again.');
                }
            } catch (error) {
                console.error('Error deleting author:', error);
                alert('Error deleting author. Please try again.');
            }
        }
    }

    // Function to return to Index page
    function returnToIndex() {
        window.location.href = "/Authors/Index";
    }

    // Fetch authors data when page loads
    window.addEventListener('load', () => {
        const searchTerm = decodeURIComponent('@searchTerm');
        fetchAuthorsBySearchTerm(searchTerm);
    });
</script>
